void
draw(GList *first, struct matrix *_matrix, struct winsize *terminal_dimensions)
{
        guint i;

        i = 0;

        GList **current, **intermediate, **last;
	printf("Initializing first double pointer\n");
	current = &first;
	printf("Initializing second double pointer\n");
	*last = g_list_last(first);
	
	printf("entering main loop\n");

	while (true){
		printf("Address is not null\n");
       		if ( ( (drop*)( ( (*current) )->data) )->position_y + 1 < terminal_dimensions->ws_row){
			printf("Writing\n");
			_matrix->
				rows [( ( (drop*)(*current)->data) )->position_y].
			 	cells[( ( (drop*)(*current)->data) )->position_x] =
			 	      ( ( (drop*)(*current)->data))->value;
       			printf("Advanced\n");
		//printf("%c ", ( (drop*)(current->data) )->value);
		//printf("Position: %d, length: %d\n",
		//	( (drop*)(current->data))->position_y,
		//	( (drop*)(current->data))->length);
		}

		if ( ( ( (int)( ( ( (drop*)(*current)->data) )->position_y) -
		     (int) ( ( ( (drop*)(*current)->data) )->length) ) >= 0) &&

		     ( ( ( (drop*)(*current)->data) )->position_y  <
		     ( ( (drop*)(*current)->data) )->length +
		     terminal_dimensions->ws_row) ){

			//printf("Erasing\n");
			_matrix->
				rows[ ( ( ( (drop*)(*current)->data) )->position_y )- 
				      ( ( ( (drop*)(*current)->data) )->length )].
				    cells[( ( (drop*)(*current)->data) )->position_x]
				    = ' ';
			//	printf("Tailing\n");
				//return;
		}

		if ( ( ( (drop*)(*current)->data) )->position_y <
		   ( ( ( (drop*)(*current)->data) )->length +
		        terminal_dimensions->ws_row ) ){
			printf("This should be deleted!\n");
			
			/*	Here is where I need to delete this element from the list.
			 *	If this works, the program will be ready to ship v1.0!
			 */
			printf("Preparing to delete. Next memory address is %p\n", &( (*current)->next) );
			intermediate = current;
			current = &((*current)->next);
			g_list_delete_link(first, *intermediate);
			printf("Deleted. Current memory address is %p\n", current);

		}else{	

			current = &((*current)->next);
		
		}
		printf("About to check address\n");
		if (&&current){
			return;
		}
		printf("Address %p\n", current);
	}


	printf("\n");
	//printf("Value of current: %c\n", ( (drop*)(first->data) )->value);

        for (i=1; i<terminal_dimensions->ws_row;i++){
		//printf("X");
		//printf("%s\n", _matrix->rows[i].cells);
		//fflush(stdout);
        }
        return;
}

